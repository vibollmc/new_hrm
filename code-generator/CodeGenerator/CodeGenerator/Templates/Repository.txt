using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using Hris.Data;
using Hris.Data.Enum;
using Hris.Database;
using Hris.Database.Entities.List;
using Hris.List.Business.Domains;
using Hris.List.Business.Repositories;
using Microsoft.EntityFrameworkCore;

namespace Hris.List.Persistence
{
    public class {0}Repository: I{0}Repository
    {
        private readonly HrisContext _dbContext;
        private readonly IMapper _mapper;

        public {0}Repository(HrisContext dbContext, IMapper mapper)
        {
            _dbContext = dbContext;
            _mapper = mapper;
        }

        public async Task<int?> Save({0} {1})
        {
            if ({1} == null) return null;

            var {1}Db = await _dbContext.{0}s.FirstOrDefaultAsync(x => x.Id == {1}.Id);

            if ({1}Db == null)
            {
                {1}Db = _mapper.Map<MD{0}>({1});
                {1}Db.CreatedAt = DateTime.Now;
                await _dbContext.{0}s.AddAsync({1}Db);
            }
            else
            {
                _mapper.Map({1}, {1}Db);
                {1}Db.UpdatedAt = DateTime.Now;
            }

            await _dbContext.SaveChangesAsync();

            return {1}Db.Id;
        }

        public async Task<IEnumerable<{0}>> Select()
        {

            var {1}s = _dbContext.{0}s.ProjectTo<{0}>(x => !x.DeletedAt.HasValue);

            return await {1}s.ToListAsync();
        }

        public async Task<IEnumerable<{0}>> Select(Status status)
        {

            var {1}s = _dbContext.{0}s
                .ProjectTo<{0}>(x => x.Status == status && !x.DeletedAt.HasValue);

            return await {1}s.ToListAsync();
        }

        public async Task<int?> ToggleStatus({0} {1})
        {
            var {1}db = await _dbContext.{0}s.FirstOrDefaultAsync(x=> x.Id == {1}.Id);
            if ({1}db == null) return 0;

            {1}db.Status = {1}db.Status.Toggle();
            {1}db.UpdatedAt = DateTime.Now;
            {1}db.UpdatedBy = {1}.UpdatedBy;

            await _dbContext.SaveChangesAsync();

            return {1}db.Id;
        }

        public async Task<int?> Delete({0} {1})
        {
            var {1}db = await _dbContext.{0}s.FirstOrDefaultAsync(x => x.Id == {1}.Id);
            if ({1}db == null) return 0;

            {1}db.DeletedAt = DateTime.Now;
            {1}db.DeletedBy = {1}.DeletedBy;

            await _dbContext.SaveChangesAsync();

            return {1}db.Id;
        }
    }
}
